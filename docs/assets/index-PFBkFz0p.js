var N=Object.defineProperty;var q=(e,t,s)=>t in e?N(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var w=(e,t,s)=>(q(e,typeof t!="symbol"?t+"":t,s),s);import{signal as T,render as S,html as C}from"https://cdn.jsdelivr.net/npm/uhtml/preactive.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))u(a);new MutationObserver(a=>{for(const n of a)if(n.type==="childList")for(const o of n.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&u(o)}).observe(document,{childList:!0,subtree:!0});function s(a){const n={};return a.integrity&&(n.integrity=a.integrity),a.referrerPolicy&&(n.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?n.credentials="include":a.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function u(a){if(a.ep)return;a.ep=!0;const n=s(a);fetch(a.href,n)}})();const F={},k=1e3*60*60,x=({tags:e,ttl:t=k,query:s,baseUrl:u,fetchFn:a})=>(n,o)=>{const r=T({isLoading:!1,data:void 0,error:void 0});return navigator.serviceWorker.ready.then(l=>{var L;const i=g=>{g.data.type==="CACHE_ENTRY_INVALIDATED"&&m()},c=()=>{navigator.serviceWorker.removeEventListener("message",i)};c(),n.push(c),navigator.serviceWorker.startMessages(),navigator.serviceWorker.addEventListener("message",i);const d=s(o),p=`${u}${d.url}`,y=structuredClone(d);delete y.url;const h={url:p,method:d.method||"GET",ttl:t,body:d.body?JSON.stringify(d.body):null};e.forEach(g=>{F[g]=h}),(L=l.active)==null||L.postMessage({type:"TTL",req:h});const m=()=>{const g=new Request(p,y);r.value={...r.value,isLoading:!0},a(g).then(async f=>{if(f.ok){const v=await f.json();r.value={status:f.status,statusText:f.statusText,data:v,isError:!1,isSuccess:!0,isLoading:!1}}else{const v=await f.text();r.value={status:f.status,statusText:f.statusText,error:v,isError:!0,isSuccess:!1,isLoading:!1}}})};m()}),r},$=({invalidatesTags:e,query:t,baseUrl:s,fetchFn:u})=>{const a=T({isLoading:!1,data:void 0,error:void 0}),n=o=>{const r=t(o),l=`${s}${r.url}`;delete r.url,r.body&&(r.body=JSON.stringify(r.body));const i=new Request(l,r);a.value={...a.value,isLoading:!0},u(i).then(async c=>{if(c.ok){const d=await c.json();a.value={status:c.status,statusText:c.statusText,data:d,isError:!1,isSuccess:!0,isLoading:!1},e.forEach(p=>b(p))}else{const d=await c.text();a.value={status:c.status,statusText:c.statusText,error:d,isError:!0,isSuccess:!1,isLoading:!1}}})};return{mutationFn:o=>navigator.serviceWorker.ready.then(()=>{n(o)}),resultSignal:a}},E=e=>e.split("").map((t,s)=>s===0?t.toUpperCase():t).join(""),A=({baseQuery:e,endpoints:t})=>{const{baseUrl:s,fetchFn:u}=e;return navigator.serviceWorker.ready.then(o=>{var r;(r=o.active)==null||r.postMessage({type:"HANDLE_URL",url:s})}),Object.entries(t({query:({query:o,providesTags:r,ttl:l})=>i=>({type:"query",name:`create${E(i)}Query`,signalCreator:x({tags:r,ttl:l,query:o,baseUrl:s,fetchFn:u})}),mutation:({query:o,invalidatesTags:r})=>l=>{const{mutationFn:i,resultSignal:c}=$({query:o,invalidatesTags:r,baseUrl:s,fetchFn:u});return{type:"mutation",name:`create${E(l)}Mutation`,mutationFn:i,resultSignal:c}}})).reduce((o,[r,l])=>{const i=l(r);return o[i.name]=i.type==="query"?i.signalCreator:()=>[i.mutationFn,i.resultSignal],o},{})},M=({baseUrl:e})=>({baseUrl:e,fetchFn:window.fetch}),b=e=>{navigator.serviceWorker.ready.then(t=>{var s;(s=t.active)==null||s.postMessage({type:"INVALIDATE_CACHE_ENTRY",req:F[e]})})},O=A({baseQuery:M({baseUrl:"https://catfact.ninja"}),endpoints:e=>({getCatFact:e.query({query:()=>({url:"/fact"}),providesTags:["cat"]}),addCatFact:e.mutation({query:t=>({url:"/fact",method:"PUT",body:t}),invalidatesTags:["cat"]})})}),{createGetCatFactQuery:R,createAddCatFactMutation:W}=O;customElements.define("cat-fact",class extends HTMLElement{constructor(){super();w(this,"render",()=>{var t;return C`
      <div>
        <h1>Cat fact of the day</h1>
        <p>${this.catFact.value.isLoading?"loading...":(t=this.catFact.value.data)==null?void 0:t.fact}</p>
        <button onclick=${()=>b("cat")}>change cat fact</button>
        <button onclick=${()=>{this.postNewFact({id:"1",text:"hi"})}}>
          Post a new fact
        </button>
        ${this.postNewFactResult.value.error?C`<div>${this.postNewFactResult.value.error}</div>`:""}
      </div>
  `});this.cleanups=[]}connectedCallback(){this.catFact=R(this.cleanups);const[t,s]=W();this.postNewFact=t,this.postNewFactResult=s,S(this,this.render)}disconnectedCallback(){this.cleanups.forEach(t=>t())}});const D=async()=>{try{const e=await navigator.serviceWorker.register("/sw.js",{scope:"./"});e.update(),console.log("Service worker registration succeeded:",e)}catch(e){console.error(`Service worker registration failed: ${e}`)}};D();navigator.serviceWorker.controller||location.reload();
